<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Collaborators - SyncPad</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body>
    <main class="w-full h-screen bg-zinc-100 font-['Helvetica']">
        <!-- Desktop Navigation -->
        <nav class="hidden md:flex px-10 justify-between items-center py-5">
            <!-- Section 1: Project Name (Top-Left) -->
            <div class="flex items-center gap-4">
                <a href="/home" class="text-2xl tracking-tight logo">SyncPad</a>
                <span class="text-sm text-gray-500 font-light">Mini Project</span>
            </div>
            
            <!-- Section 2: Home/Dashboard (Top-Center) -->
            <div class="flex items-center gap-4">
                <a href="/home" class="px-4 py-2 text-gray-700 hover:text-blue-600 transition-colors font-medium">
                    <i class="ri-home-line mr-2"></i>
                    Home
                </a>
                <a href="/collaborators" class="px-4 py-2 text-blue-600 font-medium flex items-center gap-2">
                    <i class="ri-dashboard-line"></i>
                    Collaborators
                </a>
            </div>
            
            <!-- Section 3: Profile (Top-Right) -->
            <div class="flex items-center gap-3">
                <div class="text-right">
                    <div class="text-sm text-gray-600">Welcome, <%= user.name %></div>
                </div>
                
                <!-- Request Icon (Circular) -->
                <div class="relative">
                    <button onclick="toggleRequests()" class="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center text-white text-lg font-bold hover:from-orange-600 hover:to-red-600 transition-all duration-300 shadow-lg hover:shadow-xl" style="border-radius: 50%;">
                        <i class="ri-notification-line"></i>
                    </button>
                    <span id="requestBadgeNav" class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center hidden">!</span>
                </div>
                
                <!-- Profile Icon -->
                <div class="relative">
                    <button onclick="toggleProfile()" class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-lg font-bold hover:from-blue-600 hover:to-purple-700 transition-all duration-300 shadow-lg hover:shadow-xl" style="border-radius: 50%;">
                        <%= user.name.charAt(0).toUpperCase() %>
                    </button>
                    
                    <!-- Profile Dropdown -->
                    <div id="profileDropdown" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50">
                        <div class="bg-white h-full w-full p-6">
                            <div class="flex justify-between items-center mb-8">
                                <h2 class="text-2xl font-bold text-gray-800">Profile</h2>
                                <button onclick="toggleProfile()" class="p-2 text-gray-700 hover:text-blue-600 transition-colors">
                                    <i class="ri-close-line text-2xl"></i>
                                </button>
                            </div>
                            
                            <div class="flex items-center gap-4 mb-8">
                                <div class="w-20 h-20 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-3xl font-bold" style="border-radius: 50%;">
                                    <%= user.name.charAt(0).toUpperCase() %>
                                </div>
                                <div>
                                    <h3 class="text-2xl font-semibold text-gray-800"><%= user.name %></h3>
                                    <p class="text-lg text-gray-500"><%= user.email %></p>
                                </div>
                            </div>
                            
                            <div class="space-y-4">
                                <button onclick="editProfile()" class="w-full flex items-center gap-3 p-4 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors text-lg">
                                    <i class="ri-edit-line text-xl"></i>
                                    Edit Profile
                                </button>
                                <button onclick="changePassword()" class="w-full flex items-center gap-3 p-4 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors text-lg">
                                    <i class="ri-lock-line text-xl"></i>
                                    Change Password
                                </button>
                                <hr class="my-4">
                                <a href="/logout" class="w-full flex items-center gap-3 p-4 text-red-600 hover:bg-red-50 rounded-lg transition-colors text-lg">
                                    <i class="ri-logout-box-line text-xl"></i>
                                    Logout
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Mobile Navigation -->
        <nav class="md:hidden flex px-4 justify-between items-center py-4">
            <!-- Mobile Menu Button (Top-Left) -->
            <button onclick="toggleMobileMenu()" class="p-2 text-gray-700 hover:text-blue-600 transition-colors">
                <i id="menuIcon" class="ri-menu-line text-2xl"></i>
            </button>
            
            <!-- Project Name (Top-Center) -->
            <div class="flex flex-col items-center">
                <a href="/home" class="text-xl tracking-tight logo">SyncPad</a>
                <span class="text-xs text-gray-500 font-light">Mini Project</span>
            </div>
            
            <!-- Request Icon (Mobile) -->
            <div class="relative mr-2">
                <button onclick="toggleRequests()" class="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center text-white text-lg font-bold hover:from-orange-600 hover:to-red-600 transition-all duration-300 shadow-lg hover:shadow-xl" style="border-radius: 50%;">
                    <i class="ri-notification-line"></i>
                </button>
                <span id="requestBadgeNavMobile" class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center hidden">!</span>
            </div>
            
            <!-- Profile Picture (Top-Right) -->
            <div class="relative">
                <button onclick="toggleMobileProfile()" class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-lg font-bold hover:from-blue-600 hover:to-purple-700 transition-all duration-300 shadow-lg hover:shadow-xl" style="border-radius: 50%;">
                    <%= user.name.charAt(0).toUpperCase() %>
                </button>
                
                <!-- Mobile Profile Dropdown -->
                <div id="mobileProfileDropdown" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50">
                    <div class="bg-white h-full w-full p-6">
                        <div class="flex justify-between items-center mb-8">
                            <h2 class="text-2xl font-bold text-gray-800">Profile</h2>
                            <button onclick="toggleMobileProfile()" class="p-2 text-gray-700 hover:text-blue-600 transition-colors">
                                <i class="ri-close-line text-2xl"></i>
                            </button>
                        </div>
                        
                        <div class="flex items-center gap-4 mb-8">
                            <div class="w-20 h-20 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-3xl font-bold" style="border-radius: 50%;">
                                <%= user.name.charAt(0).toUpperCase() %>
                            </div>
                            <div>
                                <h3 class="text-2xl font-semibold text-gray-800"><%= user.name %></h3>
                                <p class="text-lg text-gray-500"><%= user.email %></p>
                            </div>
                        </div>
                        
                        <div class="space-y-4">
                            <button onclick="editProfile()" class="w-full flex items-center gap-3 p-4 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors text-lg">
                                <i class="ri-edit-line text-xl"></i>
                                Edit Profile
                            </button>
                            <button onclick="changePassword()" class="w-full flex items-center gap-3 p-4 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors text-lg">
                                <i class="ri-lock-line text-xl"></i>
                                Change Password
                            </button>
                            <hr class="my-4">
                            <a href="/logout" class="w-full flex items-center gap-3 p-4 text-red-600 hover:bg-red-50 rounded-lg transition-colors text-lg">
                                <i class="ri-logout-box-line text-xl"></i>
                                Logout
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Mobile Menu Overlay -->
        <div id="mobileMenu" class="md:hidden hidden fixed inset-0 bg-black bg-opacity-50 z-40">
            <div class="bg-white h-full w-full p-6">
                <div class="flex justify-between items-center mb-8">
                    <h2 class="text-2xl font-bold text-gray-800">Menu</h2>
                    <button onclick="toggleMobileMenu()" class="p-2 text-gray-700 hover:text-blue-600 transition-colors">
                        <i class="ri-close-line text-2xl"></i>
                    </button>
                </div>
                
                <div class="space-y-6">
                    <a href="/home" class="flex items-center gap-3 p-4 hover:bg-gray-50 rounded-lg text-gray-700">
                        <i class="ri-home-line text-xl"></i>
                        <span class="text-lg font-medium">Home</span>
                    </a>
                    
                    <a href="/collaborators" class="flex items-center gap-3 p-4 bg-blue-50 rounded-lg text-blue-600">
                        <i class="ri-dashboard-line text-xl"></i>
                        <span class="text-lg font-medium">Collaborators</span>
                    </a>
                    
                    <a href="/notes" class="flex items-center gap-3 p-4 hover:bg-gray-50 rounded-lg text-gray-700">
                        <i class="ri-file-text-line text-xl"></i>
                        <span class="text-lg font-medium">All Notes</span>
                    </a>
                    
                    <a href="/create" class="flex items-center gap-3 p-4 hover:bg-gray-50 rounded-lg text-gray-700">
                        <i class="ri-add-line text-xl"></i>
                        <span class="text-lg font-medium">Create Note</span>
                    </a>
                </div>
                
                <div class="mt-8 pt-6 border-t">
                    <div class="flex items-center gap-3 p-4">
                        <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-lg font-bold" style="border-radius: 50%;">
                            <%= user.name.charAt(0).toUpperCase() %>
                        </div>
                        <div>
                            <div class="font-medium text-gray-800"><%= user.name %></div>
                            <div class="text-sm text-gray-500"><%= user.email %></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="px-4 md:px-10 py-6">
            <!-- Welcome Section -->
            <div class="mb-8">
                <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-2">Here's your collaborators & Team Members</h1>
                <p class="text-gray-600">Manage your collaborators and team communications</p>
            </div>

            <!-- Three Column Layout -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Column 1: Collaborators -->
                <div class="bg-white rounded-lg shadow-md p-6" id="collaborators-section" ondrop="drop(event, 'collaborators')" ondragover="allowDrop(event)">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-semibold text-gray-800">Collaborators</h2>
                        <button class="text-blue-600 hover:text-blue-800 transition-colors">
                            <i class="ri-add-line"></i>
                        </button>
                    </div>
                    
                    <div class="space-y-4" id="collaborators-list">
                        <!-- Search Bar -->
                        <div class="mb-4">
                            <input type="text" id="userSearch" placeholder="Search users..." 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                   onkeyup="searchUsers()">
                        </div>
                        
                        <!-- Users List -->
                        <div id="usersList" class="space-y-3">
                            <% if (users && users.length > 0) { %>
                                <% users.forEach(user => { %>
                                    <div class="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                                        <div class="flex items-center gap-3">
                                            <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
                                                <%= user.name.charAt(0).toUpperCase() %>
                                            </div>
                                            <div>
                                                <div class="font-medium text-gray-800"><%= user.name %></div>
                                                <div class="text-sm text-gray-500"><%= user.email %></div>
                                                <div class="text-xs text-gray-400">ID: <%= user.uniqueId %></div>
                                            </div>
                                        </div>
                                        <div class="flex items-center gap-2">
                                            <span class="text-xs text-gray-500"><%= user.publicNoteCount %> public notes</span>
                                            <button onclick="viewUserNotes('<%= user.id %>')" 
                                                    class="px-3 py-1 bg-blue-100 text-blue-600 rounded-md hover:bg-blue-200 transition-colors text-sm">
                                                <i class="ri-eye-line mr-1"></i>
                                                View Notes
                                            </button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="text-center py-8 text-gray-500">
                                    <i class="ri-user-line text-4xl mb-4 block"></i>
                                    <p class="text-lg font-medium mb-2">No users found</p>
                                    <p class="text-sm">Try adjusting your search or check back later</p>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>

                <!-- Column 2: More Collaborators -->
                <div class="bg-white rounded-lg shadow-md p-6" id="team-section" ondrop="drop(event, 'team')" ondragover="allowDrop(event)">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-semibold text-gray-800">Team Members</h2>
                        <span class="text-sm text-gray-500">Active</span>
                    </div>
                    
                    <div class="space-y-4" id="team-list">
                        <!-- Empty state for team members -->
                        <div class="text-center py-8 text-gray-500">
                            <i class="ri-team-line text-4xl mb-4 block"></i>
                            <p class="text-lg font-medium mb-2">No team members yet</p>
                            <p class="text-sm">Invite team members to collaborate</p>
                            <button onclick="showAddTeamModal()" class="mt-4 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                                <i class="ri-user-add-line mr-2"></i>
                                Invite Team Member
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Column 3: New Requests & Messaging -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-semibold text-gray-800">Requests & Messages</h2>
                        <div class="flex gap-2">
                            <button id="requestsBtn" class="p-2 text-blue-600 hover:bg-blue-50 rounded-md transition-colors relative" onclick="toggleRequests()">
                                <i class="ri-notification-line"></i>
                                <span id="requestBadge" class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full hidden"></span>
                            </button>
                            <button id="messagesBtn" class="p-2 text-green-600 hover:bg-green-50 rounded-md transition-colors relative" onclick="toggleMessages()">
                                <i class="ri-message-3-line"></i>
                                <span id="messageBadge" class="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full hidden"></span>
                            </button>
                        </div>
                    </div>
                    
                    <!-- New Requests Section -->
                    <div id="requestsSection" class="mb-6">
                        <h3 class="text-lg font-medium text-gray-700 mb-3">New Requests</h3>
                        <div class="space-y-3" id="requestsList">
                            <!-- Empty state for requests -->
                            <div class="text-center py-6 text-gray-500">
                                <i class="ri-inbox-line text-2xl mb-2 block"></i>
                                <p class="text-sm">No pending requests</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Messaging Interface -->
                    <div id="messagingInterface" class="hidden">
                        <div class="border-t pt-4">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-medium text-gray-700" id="messagingTitle">Messages</h3>
                                <button onclick="closeMessaging()" class="text-gray-500 hover:text-gray-700">
                                    <i class="ri-close-line"></i>
                                </button>
                            </div>
                            
                            <!-- User Selection for Messaging -->
                            <div class="mb-4">
                                <select id="messageUserSelect" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500" onchange="selectMessageUser()">
                                    <option value="">Select a user to message...</option>
                                </select>
                            </div>
                            
                            <!-- Messages List -->
                            <div id="messagesList" class="space-y-2 mb-4 max-h-48 overflow-y-auto">
                                <div class="text-center py-6 text-gray-500">
                                    <i class="ri-message-3-line text-2xl mb-2 block"></i>
                                    <p class="text-sm">Select a user to start messaging</p>
                                </div>
                            </div>
                            
                            <!-- Message Input -->
                            <div id="messageInputContainer" class="hidden">
                                <div class="mb-2">
                                    <input type="text" id="messageTitle" placeholder="Message title (optional)" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500 mb-2">
                                </div>
                                <div class="flex gap-2">
                                    <textarea id="messageContent" placeholder="Type your mini note..." class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500 resize-none" rows="2"></textarea>
                                    <button onclick="sendMessage()" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
                                        <i class="ri-send-plane-line"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        // Desktop Profile dropdown toggle
        function toggleProfile() {
            const dropdown = document.getElementById('profileDropdown');
            dropdown.classList.toggle('hidden');
        }

        // Mobile Profile dropdown toggle
        function toggleMobileProfile() {
            const dropdown = document.getElementById('mobileProfileDropdown');
            dropdown.classList.toggle('hidden');
        }

        // Mobile Menu toggle
        function toggleMobileMenu() {
            const menu = document.getElementById('mobileMenu');
            const menuIcon = document.getElementById('menuIcon');
            
            menu.classList.toggle('hidden');
            
            if (menu.classList.contains('hidden')) {
                menuIcon.className = 'ri-menu-line text-2xl';
            } else {
                menuIcon.className = 'ri-close-line text-2xl';
            }
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            const profileButton = event.target.closest('button[onclick="toggleProfile()"]');
            const mobileProfileButton = event.target.closest('button[onclick="toggleMobileProfile()"]');
            const profileDropdown = document.getElementById('profileDropdown');
            const mobileProfileDropdown = document.getElementById('mobileProfileDropdown');
            
            if (!profileButton && !profileDropdown.contains(event.target)) {
                profileDropdown.classList.add('hidden');
            }
            
            if (!mobileProfileButton && !mobileProfileDropdown.contains(event.target)) {
                mobileProfileDropdown.classList.add('hidden');
            }
        });

        // Edit profile function
        function editProfile() {
            alert('Edit Profile functionality will be implemented here');
        }

        // Change password function
        function changePassword() {
            alert('Change Password functionality will be implemented here');
        }

        // Collaborator selection
        function selectCollaborator(collaboratorId) {
            // Remove previous selection
            document.querySelectorAll('.collaborator-card').forEach(card => {
                card.classList.remove('border-blue-500', 'bg-blue-50');
                card.classList.add('border-gray-200');
            });
            
            // Add selection to clicked card
            event.currentTarget.classList.remove('border-gray-200');
            event.currentTarget.classList.add('border-blue-500', 'bg-blue-50');
        }

        // View user notes function
        function viewUserNotes(userId) {
            window.location.href = `/user/${userId}/notes`;
        }

        // Search users function
        async function searchUsers() {
            const query = document.getElementById('userSearch').value.trim();
            const usersList = document.getElementById('usersList');
            
            if (query.length < 2) {
                // Show all users if query is too short
                location.reload();
                return;
            }
            
            try {
                const response = await fetch(`/search-users?query=${encodeURIComponent(query)}`);
                const data = await response.json();
                
                if (data.users && data.users.length > 0) {
                    usersList.innerHTML = data.users.map(user => `
                        <div class="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                            <div class="flex items-center gap-3">
                                <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
                                    ${user.name.charAt(0).toUpperCase()}
                                </div>
                                <div>
                                    <div class="font-medium text-gray-800">${user.name}</div>
                                    <div class="text-sm text-gray-500">${user.email}</div>
                                    <div class="text-xs text-gray-400">ID: ${user.uniqueId}</div>
                                </div>
                            </div>
                            <div class="flex items-center gap-2">
                                <span class="text-xs text-gray-500">${user.publicNoteCount} public notes</span>
                                <button onclick="viewUserNotes('${user.id}')" 
                                        class="px-3 py-1 bg-blue-100 text-blue-600 rounded-md hover:bg-blue-200 transition-colors text-sm">
                                    <i class="ri-eye-line mr-1"></i>
                                    View Notes
                                </button>
                            </div>
                        </div>
                    `).join('');
                } else {
                    usersList.innerHTML = `
                        <div class="text-center py-8 text-gray-500">
                            <i class="ri-search-line text-4xl mb-4 block"></i>
                            <p class="text-lg font-medium mb-2">No users found</p>
                            <p class="text-sm">Try a different search term</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error searching users:', error);
                showNotification('Error searching users', 'error');
            }
        }

        // Start messaging function
        function startMessaging(collaboratorId) {
            const messagingInterface = document.getElementById('messagingInterface');
            const messagingTitle = document.getElementById('messagingTitle');
            
            messagingTitle.textContent = `Messages with ${collaboratorId}`;
            messagingInterface.classList.remove('hidden');
        }

        // Close messaging
        function closeMessaging() {
            document.getElementById('messagingInterface').classList.add('hidden');
        }

        // Global variables for messaging
        let currentMessageUser = null;
        let messagingUsers = [];
        let unreadCount = 0;

        // Initialize messaging system
        document.addEventListener('DOMContentLoaded', function() {
            loadMessagingUsers();
            loadUnreadCount();
            updateRequestBadge();
            setInterval(loadUnreadCount, 30000); // Check for new messages every 30 seconds
            setInterval(updateRequestBadge, 60000); // Check for requests every minute
        });

        // Toggle requests
        function toggleRequests() {
            const requestsSection = document.getElementById('requestsSection');
            const messagingInterface = document.getElementById('messagingInterface');
            const requestsBtn = document.getElementById('requestsBtn');
            const messagesBtn = document.getElementById('messagesBtn');
            
            // Show requests, hide messaging
            requestsSection.classList.remove('hidden');
            messagingInterface.classList.add('hidden');
            
            // Update button states
            requestsBtn.classList.add('bg-blue-50');
            messagesBtn.classList.remove('bg-green-50');
        }

        // Toggle messages
        function toggleMessages() {
            const requestsSection = document.getElementById('requestsSection');
            const messagingInterface = document.getElementById('messagingInterface');
            const requestsBtn = document.getElementById('requestsBtn');
            const messagesBtn = document.getElementById('messagesBtn');
            
            // Hide requests, show messaging
            requestsSection.classList.add('hidden');
            messagingInterface.classList.remove('hidden');
            
            // Update button states
            messagesBtn.classList.add('bg-green-50');
            requestsBtn.classList.remove('bg-blue-50');
            
            // Load conversations if not already loaded
            if (messagingUsers.length === 0) {
                loadMessagingUsers();
            }
        }

        // Load users available for messaging
        async function loadMessagingUsers() {
            try {
                const response = await fetch('/api/messages/users');
                const data = await response.json();
                
                if (data.users) {
                    messagingUsers = data.users;
                    populateUserSelect();
                }
            } catch (error) {
                console.error('Error loading messaging users:', error);
                showNotification('Error loading users', 'error');
            }
        }

        // Populate user select dropdown
        function populateUserSelect() {
            const select = document.getElementById('messageUserSelect');
            select.innerHTML = '<option value="">Select a user to message...</option>';
            
            messagingUsers.forEach(user => {
                const option = document.createElement('option');
                option.value = user._id;
                option.textContent = `${user.name} (${user.email})`;
                select.appendChild(option);
            });
        }

        // Select a user for messaging
        function selectMessageUser() {
            const select = document.getElementById('messageUserSelect');
            const userId = select.value;
            
            if (userId) {
                currentMessageUser = userId;
                loadMessages(userId);
                document.getElementById('messageInputContainer').classList.remove('hidden');
            } else {
                currentMessageUser = null;
                document.getElementById('messagesList').innerHTML = `
                    <div class="text-center py-6 text-gray-500">
                        <i class="ri-message-3-line text-2xl mb-2 block"></i>
                        <p class="text-sm">Select a user to start messaging</p>
                    </div>
                `;
                document.getElementById('messageInputContainer').classList.add('hidden');
            }
        }

        // Load messages for a specific user
        async function loadMessages(userId) {
            try {
                const response = await fetch(`/api/messages/messages/${userId}`);
                const data = await response.json();
                
                if (data.messages) {
                    displayMessages(data.messages);
                }
            } catch (error) {
                console.error('Error loading messages:', error);
                showNotification('Error loading messages', 'error');
            }
        }

        // Display messages in the chat area
        function displayMessages(messages) {
            const messagesList = document.getElementById('messagesList');
            
            if (messages.length === 0) {
                messagesList.innerHTML = `
                    <div class="text-center py-6 text-gray-500">
                        <i class="ri-message-3-line text-2xl mb-2 block"></i>
                        <p class="text-sm">No messages yet. Start the conversation!</p>
                    </div>
                `;
                return;
            }
            
            messagesList.innerHTML = messages.map(message => {
                const currentUserId = '<%= user._id || "current-user" %>';
                const isOwnMessage = message.sender._id === currentUserId;
                const messageClass = isOwnMessage ? 'bg-blue-50 ml-4' : 'bg-gray-50 mr-4';
                const timeAgo = getTimeAgo(new Date(message.createdAt));
                
                return `
                    <div class="p-3 ${messageClass} rounded-lg">
                        ${message.title ? `<div class="font-medium text-sm text-gray-800 mb-1">${message.title}</div>` : ''}
                        <div class="text-sm text-gray-800">${message.content}</div>
                        <div class="text-xs text-gray-500 mt-1">${timeAgo}</div>
                    </div>
                `;
            }).join('');
            
            // Scroll to bottom
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        // Send a message
        async function sendMessage() {
            if (!currentMessageUser) {
                showNotification('Please select a user first', 'error');
                return;
            }
            
            const title = document.getElementById('messageTitle').value.trim();
            const content = document.getElementById('messageContent').value.trim();
            
            if (!content) {
                showNotification('Please enter a message', 'error');
                return;
            }
            
            try {
                const response = await fetch('/api/messages/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        receiverId: currentMessageUser,
                        title: title,
                        content: content
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Clear input fields
                    document.getElementById('messageTitle').value = '';
                    document.getElementById('messageContent').value = '';
                    
                    // Reload messages
                    loadMessages(currentMessageUser);
                    showNotification('Message sent!', 'success');
                } else {
                    showNotification(data.error || 'Error sending message', 'error');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showNotification('Error sending message', 'error');
            }
        }

        // Load unread message count
        async function loadUnreadCount() {
            try {
                const response = await fetch('/api/messages/unread-count');
                const data = await response.json();
                
                if (data.unreadCount !== undefined) {
                    unreadCount = data.unreadCount;
                    updateMessageBadge();
                }
            } catch (error) {
                console.error('Error loading unread count:', error);
            }
        }

        // Update message badge
        function updateMessageBadge() {
            const badge = document.getElementById('messageBadge');
            if (unreadCount > 0) {
                badge.classList.remove('hidden');
                badge.textContent = unreadCount > 9 ? '9+' : unreadCount;
            } else {
                badge.classList.add('hidden');
            }
        }

        // Update request badge (for demo purposes - you can implement actual request logic)
        function updateRequestBadge() {
            const badge = document.getElementById('requestBadgeNav');
            const badgeMobile = document.getElementById('requestBadgeNavMobile');
            const hasRequests = Math.random() > 0.7; // Demo: random requests
            
            if (hasRequests) {
                badge.classList.remove('hidden');
                badgeMobile.classList.remove('hidden');
            } else {
                badge.classList.add('hidden');
                badgeMobile.classList.add('hidden');
            }
        }

        // Get time ago string
        function getTimeAgo(date) {
            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);
            
            if (diffInSeconds < 60) return 'Just now';
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
            if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
            return `${Math.floor(diffInSeconds / 86400)}d ago`;
        }

        // Accept request
        function acceptRequest(userId) {
            alert(`Accepted request from ${userId}`);
        }

        // Decline request
        function declineRequest(userId) {
            alert(`Declined request from ${userId}`);
        }

        // Drag and Drop Functions
        function allowDrop(ev) {
            ev.preventDefault();
            ev.currentTarget.classList.add('border-blue-400', 'bg-blue-50');
        }

        function drag(ev) {
            ev.dataTransfer.setData("text", ev.target.outerHTML);
            ev.dataTransfer.setData("user", ev.target.getAttribute('data-user'));
            ev.dataTransfer.setData("source", ev.target.closest('[id$="-list"]').id);
            ev.target.style.opacity = '0.5';
        }

        function drop(ev, targetSection) {
            ev.preventDefault();
            ev.currentTarget.classList.remove('border-blue-400', 'bg-blue-50');
            
            const data = ev.dataTransfer.getData("text");
            const user = ev.dataTransfer.getData("user");
            const sourceList = ev.dataTransfer.getData("source");
            const targetList = targetSection === 'collaborators' ? 'collaborators-list' : 'team-list';
            
            // Check if it's the same list (no need to move)
            if (sourceList === targetList) {
                showNotification('User is already in this section', 'info');
                return;
            }
            
            // Check if user already exists in target list
            const existingUser = document.querySelector(`#${targetList} [data-user="${user}"]`);
            if (existingUser) {
                showNotification('User already exists in this section', 'warning');
                return;
            }
            
            // Remove from source list
            const sourceElement = document.querySelector(`#${sourceList} [data-user="${user}"]`);
            if (sourceElement) {
                sourceElement.remove();
            }
            
            // Create new element from the dragged data
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = data;
            const newElement = tempDiv.firstElementChild;
            
            // Reset opacity
            newElement.style.opacity = '1';
            
            // Add to target list
            document.getElementById(targetList).appendChild(newElement);
            
            // Show success message
            showNotification(`Moved ${user} to ${targetSection === 'collaborators' ? 'Collaborators' : 'Team Members'}`, 'success');
        }

        // Add drag end event to reset opacity
        document.addEventListener('dragend', function(ev) {
            if (ev.target.classList.contains('collaborator-card')) {
                ev.target.style.opacity = '1';
            }
        });

        // Add drag leave event to remove visual feedback
        document.addEventListener('dragleave', function(ev) {
            if (ev.target.id === 'collaborators-section' || ev.target.id === 'team-section') {
                ev.target.classList.remove('border-blue-400', 'bg-blue-50');
            }
        });

        // Modal functions for adding collaborators and team members
        function showAddCollaboratorModal() {
            const email = prompt('Enter collaborator email:');
            if (email && email.includes('@')) {
                showNotification(`Invitation sent to ${email}`, 'success');
                // Here you would normally send an invitation
            } else if (email) {
                showNotification('Please enter a valid email address', 'error');
            }
        }

        function showAddTeamModal() {
            const email = prompt('Enter team member email:');
            if (email && email.includes('@')) {
                showNotification(`Team invitation sent to ${email}`, 'success');
                // Here you would normally send a team invitation
            } else if (email) {
                showNotification('Please enter a valid email address', 'error');
            }
        }

        // Notification function
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
                type === 'success' ? 'bg-green-500 text-white' : 
                type === 'error' ? 'bg-red-500 text-white' : 
                'bg-blue-500 text-white'
            }`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    </script>
</body>

</html>
